from __future__ import division
import apiconnect
import httplib, urllib
import datetime
from datetime import date, timedelta
import json


today = datetime.date(2015, 5, 2)
todayString = '%s-%s-%s' % (today.year, today.month, today.day)
conn = apiconnect.Connection()


key = '0deb8f835f264ad99e24cc3622aeb396'

def against_lefties(homeTeam, awayTeam, conn, date, gameID):

    firstDayOfSeason = datetime.date(2015, 4, 5)
    currentDate = date
    daysSinceOpener = currentDate - firstDayOfSeason
    daysSinceOpenerInt = daysSinceOpener.days
    dateString = '%s-%s-%s' % (currentDate.year, currentDate.month, currentDate.day)

    currentDate = date
    battingOrder = get_batting_order(homeTeam, conn, dateString)
    dayCounter = 0
    hitsAgainstRighty = 0
    ABlistTotal = [0, 0, 0, 0]
    holder = 0
    ABlistTotalTeam = [0, 0, 0, 0]
    data3 = conn.get_schedules('2015')
    jn3 = json.loads(data3)
    gameIDindex = 0
    gameIDArray=[]
    for index3, key3 in enumerate(jn3):
        if jn3[index3]['GameID'] == gameID:
            gameIDindex = index3
    while gameIDindex>=0:
        if jn3[gameIDindex]['AwayTeam'] == homeTeam or jn3[gameIDindex]['HomeTeam'] == homeTeam:
            currentID = jn3[gameIDindex]['GameID']
            gameIDArray.append(currentID)
            print jn3[gameIDindex]['Day']
        gameIDindex = gameIDindex-1



    ABlistTotal = [0, 0, 0, 0]
    dayCounter = 0
    currentDate = date
    averageAgainstRighty = 0
    averageAgainstLefty = 0

    x = game_performance(homeTeam, conn, dateString, battingOrder, gameIDArray)
    teamHitsAgainstRight = 0
    teamOutsAgainstRight = 0
    teamHitsAgainstLeft = 0
    teamOutsAgainstLeft = 0
    for i, item in enumerate(x):
        teamHitsAgainstRight = teamHitsAgainstRight + x[i][0]
        teamOutsAgainstRight  = teamOutsAgainstRight + x[i][1]
        teamHitsAgainstLeft = teamHitsAgainstLeft + x[i][2]
        teamOutsAgainstLeft = teamOutsAgainstLeft + x[i][3]
    teamAverageAgainstRight = teamHitsAgainstRight/(teamHitsAgainstRight+teamOutsAgainstRight)
    teamAverageAgainstLeft = teamHitsAgainstLeft/(teamHitsAgainstLeft+teamOutsAgainstLeft)
    print 'Team has %s hits against righties and is batting %s' %(teamHitsAgainstRight, teamAverageAgainstRight)
    print 'Team has %s hits against lefties and is batting %s' %(teamHitsAgainstLeft, teamAverageAgainstLeft)








def get_batting_order(team, conn, date):
    data = conn.get_player_game_stats_by_date(date)
    jn = json.loads(data)
    length = len(jn)
    battingOrder = [None]*9
    battingOrderName = [None]*9
    x = 0
    while x < length:
        if jn[x]['Team'] == team:
            order = (jn[x]['BattingOrder'])
            if order>=0 and order<9:
                order = order
                battingOrder[order] = jn[x]['PlayerID']
                battingOrderName[order] = jn[x]['Name']
        x = x+1
    print battingOrderName
    return battingOrder
   #for index, key in enumerate(jn):
       # if jn[index]['Team'] == team:
       #     pass


    pass

  #  for index, key in enumerate (jn):


def game_performance(team, conn, date, playerIDArray, gameIDArray):
    totalAB = [0,0,0,0]
    outsAgainstRighty = 0
    hitsAgainstRighty = 0
    hitsAgainstLefty = 0
    outsAgainstLefty = 0
    playerABArray = [[0 for x in range(4)] for x in range(9)]
    for i, game in enumerate(reversed(gameIDArray)):
        print 'LOOPED!!!!'
        data2 = conn.get_play_by_play(gameIDArray[i])
        jn2 = json.loads(data2)
        ABlist = []
        print len(ABlist)
        for j, player in enumerate(playerIDArray):
            x = 0
            outsAgainstRighty = 0
            hitsAgainstRighty = 0
            hitsAgainstLefty = 0
            outsAgainstLefty = 0
            print playerIDArray[j]
            for index2, key2 in enumerate(jn2):
                print 'FUCK'
                while x<len(jn2['Plays']):
                     if (jn2['Plays'][x]['HitterID']==playerIDArray[j]):
                        print jn2['Plays'][x]['HitterName']
                        throwHand = jn2['Plays'][x]['PitcherThrowHand']
                        didOut = jn2['Plays'][x]['Out']
                        didHit = jn2['Plays'][x]['Hit']
                        didStrikeout = jn2['Plays'][x]['Strikeout']
                        if throwHand == 'R':
                            if didHit == True:
                                hitsAgainstRighty = hitsAgainstRighty+1
                            if didOut == True or didStrikeout == True:
                                outsAgainstRighty = outsAgainstRighty +1
                        if throwHand == 'L':
                            if didHit == True:
                                hitsAgainstLefty = hitsAgainstLefty+1
                            if didOut == True or didStrikeout == True:
                                outsAgainstLefty = outsAgainstLefty +1
                     x = x+1
            playerABArray[j][0] = hitsAgainstRighty + playerABArray[j][0]
            playerABArray[j][1] = outsAgainstRighty + playerABArray[j][1]
            playerABArray[j][2] = hitsAgainstLefty + playerABArray[j][2]
            playerABArray[j][3] = outsAgainstLefty + playerABArray[j][3]
            ABlist.append(hitsAgainstRighty)
            ABlist.append(outsAgainstRighty)
            ABlist.append(hitsAgainstLefty)
            ABlist.append(outsAgainstLefty)


     #       print 'had %s hits against right handers' %(hitsAgainstRighty)
     #       print 'had %s outs against right handers' %(outsAgainstRighty)
     #       print 'had %s hits against left handers' %(hitsAgainstLefty)
     #       print 'had %s outs against left handers' %(outsAgainstLefty)
        print 'Hits on day against righty: %s '%hitsAgainstRighty
    return playerABArray
if __name__ == "__main__":
    against_lefties("TOR", "BOS", conn, today, 17468)
